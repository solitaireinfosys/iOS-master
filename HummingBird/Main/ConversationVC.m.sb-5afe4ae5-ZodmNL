//
//  ConversationVC.m
//  HummingBird
//
//  Created by Star on 12/5/15.
//  Copyright Â© 2015 Star. All rights reserved.
//
#import <UIKit/UIKit.h>
#import "ConversationVC.h"
#import "AppDelegate.h"
#import "Common.h"
#import "SVProgressHUD.h"
#import "AFNetworking.h"
#import "Message.h"
#import "questionModel.h"
#import "userModel.h"
#import "CommunityVC.h"
#import "SOPlaceholderedTextView.h"
#import "RatingVC.h"
#import "Utility.h"
#import "SettingVC.h"

#define rating_show 0
#define rating_hide -190

static NSString *kBaseDateFormat = @"yyyy-MM-dd HH:mm:ss";

@interface ConversationVC ()

@property (strong, nonatomic) NSMutableArray *dataSource;

@property (strong, nonatomic) UIImage *myImage;
@property (strong, nonatomic) UIImage *partnerImage;

@end

@implementation ConversationVC

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    
    [self.view bringSubviewToFront:ratingView];
    rating_y.constant = rating_hide;
    
    btnSubmit.clipsToBounds = YES;
    btnSubmit.layer.cornerRadius = 5;
    
    
    [self onUpdateStarUI];
    
    self.refreshTimer = [NSTimer scheduledTimerWithTimeInterval:60 target:self selector:@selector(loadMessages1) userInfo:nil repeats:YES];
    
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(pushReceived:)
                                                 name:kNotificationDidReceiveRemoteMessageNotification
                                               object:nil];
    

    
    self.dataSource = [NSMutableArray array];
    
//    self.myImage      = [UIImage imageNamed:@"userPhoto"];
//    self.partnerImage = [UIImage imageNamed:@"arturdev.jpg"];
    
    self.navigationItem.title = theAppDelegate.gUserData.user_email;
    
    UIBarButtonItem *btnLogout = [[UIBarButtonItem alloc] initWithTitle:@"Logout" style:UIBarButtonItemStylePlain target:self action:@selector(onLogout)];
    self.navigationItem.rightBarButtonItem = btnLogout;
    
    UIButton *btnSetting = [[UIButton alloc]initWithFrame:CGRectMake(0, 0, 44, 44)];
    [btnSetting setImage:[UIImage imageNamed:@"Settings"] forState:UIControlStateNormal];
    [btnSetting addTarget:self action:@selector(onSetting:) forControlEvents:UIControlEventTouchUpInside];
    
    
    UIBarButtonItem *barSetting = [[UIBarButtonItem alloc]initWithCustomView:btnSetting];
    
    self.navigationItem.leftBarButtonItem = barSetting;
    
    [self.btnCommunity addTarget:self action:@selector(onCommunity:) forControlEvents:UIControlEventTouchUpInside];
    
}


-(void)viewWillAppear:(BOOL)animated{
    [self loadMessages];
}
- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/

- (void)loadMessages
{
    if (self.dataSource.count == 0) {
        [SVProgressHUD showWithStatus:REQUEST_WAITING];
    }

    NSString *urlString = [NSString stringWithFormat:@"%@%@",WEBSERVICE_URL,[NSString stringWithFormat:WEB_QUESTION_GET]];
    
    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];
    
    NSDictionary *paramterDic = @{@"user_id":theAppDelegate.gUserData.user_id};
    
    [manager GET:urlString parameters:paramterDic success:^(AFHTTPRequestOperation *operation, id responseObject) {
        
        [SVProgressHUD dismiss];
        
        if ( [responseObject count] > 0 ) {
            
            [self.dataSource removeAllObjects];
            
            NSDictionary *responseDic = [responseObject objectAtIndex:0];
            if ([[responseDic objectForKey:@"status"] intValue] == 200) {
                
                NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
                
                formatter.dateFormat = kBaseDateFormat;
                
                for (int i=0; i<[responseObject count]; i++) {
                    
                    NSDictionary *objDic = [responseObject objectAtIndex:i];
                    
                    Message *chatData = [[Message alloc]init];
                    
                    if ([objDic objectForKey:@"question_id"] != nil) {
                        chatData.msg_id = [[objDic objectForKey:@"question_id"] intValue];
                    }
                    
                    if ([objDic objectForKey:@"question_text"] != nil) {
                        chatData.text = [objDic objectForKey:@"question_text"];
                    }
                    
                    if ([objDic objectForKey:@"question_date"] != nil) {
                        chatData.date = [formatter dateFromString:[objDic objectForKey:@"question_date"]];
                    }
                    
                    if ([objDic objectForKey:@"user_id"] != nil) {
                        chatData.msg_user_id = [objDic objectForKey:@"user_id"];
                    }
                    
                    if ([objDic objectForKey:@"question_active"] != nil) {
                        chatData.msg_active = [[objDic objectForKey:@"question_active"] intValue];
                    }
                    chatData.type = SOMessageTypeText;

                    
                    if ([objDic objectForKey:@"question_type"] != nil) {
                        
                        int nType = [[objDic objectForKey:@"question_type"] intValue];
                        if (nType == 1) {
                            chatData.fromMe = YES;
                        }else{
                            chatData.fromMe = NO;
                        }
                    }else{
                        chatData.fromMe = NO;
                    }
                    

                    [self.dataSource addObject:chatData];
                }
                
                dispatch_async(dispatch_get_main_queue(), ^{
                    [self refreshMessages];
                });
            }else{
//                [SVProgressHUD showErrorWithStatus:WEB_FAILED];
            }
            
        }
        
    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {
        
        [SVProgressHUD showErrorWithStatus:WEB_FAILED];
        
    }];
}
- (void)loadMessages1
{
    
    NSString *urlString = [NSString stringWithFormat:@"%@%@",WEBSERVICE_URL,[NSString stringWithFormat:WEB_QUESTION_GET]];
    
    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];
    
    NSDictionary *paramterDic = @{@"user_id":theAppDelegate.gUserData.user_id};
    
    [manager GET:urlString parameters:paramterDic success:^(AFHTTPRequestOperation *operation, id responseObject) {
        
        [SVProgressHUD dismiss];
        
        if ( [responseObject count] > 0 ) {
            
            [self.dataSource removeAllObjects];
            
            NSDictionary *responseDic = [responseObject objectAtIndex:0];
            if ([[responseDic objectForKey:@"status"] intValue] == 200) {
                
                NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
                
                formatter.dateFormat = kBaseDateFormat;
                
                for (int i=0; i<[responseObject count]; i++) {
                    
                    NSDictionary *objDic = [responseObject objectAtIndex:i];
                    
                    Message *chatData = [[Message alloc]init];
                    
                    if ([objDic objectForKey:@"question_id"] != nil) {
                        chatData.msg_id = [[objDic objectForKey:@"question_id"] intValue];
                    }
                    
                    if ([objDic objectForKey:@"question_text"] != nil) {
                        chatData.text = [objDic objectForKey:@"question_text"];
                    }
                    
                    if ([objDic objectForKey:@"question_date"] != nil) {
                        chatData.date = [formatter dateFromString:[objDic objectForKey:@"question_date"]];
                    }
                    
                    if ([objDic objectForKey:@"user_id"] != nil) {
                        chatData.msg_user_id = [objDic objectForKey:@"user_id"];
                    }
                    
                    if ([objDic objectForKey:@"question_active"] != nil) {
                        chatData.msg_active = [[objDic objectForKey:@"question_active"] intValue];
                    }
                    chatData.type = SOMessageTypeText;
                    
                    
                    if ([objDic objectForKey:@"question_type"] != nil) {
                        
                        int nType = [[objDic objectForKey:@"question_type"] intValue];
                        if (nType == 1) {
                            chatData.fromMe = YES;
                        }else{
                            chatData.fromMe = NO;
                        }
                    }else{
                        chatData.fromMe = NO;
                    }
                    
                    
                    [self.dataSource addObject:chatData];
                }
                
                dispatch_async(dispatch_get_main_queue(), ^{
                    [self refreshMessages];
                });
            }else{
                //                [SVProgressHUD showErrorWithStatus:WEB_FAILED];
            }
            
        }
        
    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {
        
        [SVProgressHUD showErrorWithStatus:WEB_FAILED];
        
        
    }];
    
}
#pragma mark - SOMessaging data source
- (NSMutableArray *)messages
{
    return self.dataSource;
}

- (NSTimeInterval)intervalForMessagesGrouping
{
    // Return 0 for disableing grouping
    return 2 * 24 * 3600;
}

- (void)configureMessageCell:(SOMessageCell *)cell forMessageAtIndex:(NSInteger)index
{
    Message *message = self.dataSource[index];
    
    // Adjusting content for 3pt. (In this demo the width of bubble's tail is 3pt)
    if (!message.fromMe) {
        cell.contentInsets = UIEdgeInsetsMake(0, 3.0f, 0, 0); //Move content for 3 pt. to right
        cell.textView.textColor = [UIColor blackColor];
    } else {
        cell.contentInsets = UIEdgeInsetsMake(0, 0, 0, 3.0f); //Move content for 3 pt. to left
        cell.textView.textColor = [UIColor whiteColor];
    }
    
    cell.userImageView.layer.cornerRadius = self.userImageSize.width/2;
    
    // Fix user image position on top or bottom.
    cell.userImageView.autoresizingMask = message.fromMe ? UIViewAutoresizingFlexibleTopMargin : UIViewAutoresizingFlexibleBottomMargin;
    
    // Setting user images
    cell.userImage = message.fromMe ? self.myImage : self.partnerImage;
}

- (CGFloat)messageMaxWidth
{
    return 140;
}

- (CGSize)userImageSize
{
    return CGSizeMake(40, 40);
}

- (CGFloat)messageMinHeight
{
    return 0;
}
#pragma mark - SOMessaging delegate
- (void)didSelectMedia:(NSData *)media inMessageCell:(SOMessageCell *)cell
{
    // Show selected media in fullscreen
    [super didSelectMedia:media inMessageCell:cell];
}

- (void)messageInputView:(SOMessageInputView *)inputView didSendMessage:(NSString *)message
{
    if (![[message stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] length]) {
        return;
    }
    
    if ([[message lowercaseString]rangeOfString:@"where"].location != NSNotFound && (theAppDelegate.uLat == 0 && theAppDelegate.uLong == 0)) {
    
        [SVProgressHUD showInfoWithStatus:@"Application would like to use your current location to help question"];
        
        [theAppDelegate getLocation];
        
        return;
    }
    
    Message *msg = [[Message alloc] init];
    msg.text = message;
    msg.fromMe = YES;
    
    [inputView.textView resignFirstResponder];
    
    if([self onCheckRatingPage]){
        
        
//        RatingVC *nRatingVC = [theAppDelegate.gMainStoryboard instantiateViewControllerWithIdentifier:@"RatingVC"];
//        
//        nRatingVC.delegate = self;
//        nRatingVC.mMessageData =  msg;
//        nRatingVC.mRatingAnswerMessage = _mSelectedRatingAnswerMessage;
//        nRatingVC.mRatingQuestionMessage = _mSelectedRatingQuestionMessage;
//        
//        
//        UINavigationController *nav = [[UINavigationController alloc]initWithRootViewController:nRatingVC];
//        
//        [self.navigationController presentViewController:nav animated:YES completion:nil];
        
        _mMessageData = msg;
        
        [lblTopAnswer setText:_mSelectedRatingAnswerMessage.text];
        
        [UIView animateWithDuration:0.4
                              delay:0
                            options:(UIViewAnimationOptionAllowUserInteraction|
                                     UIViewAnimationOptionBeginFromCurrentState)
                         animations:^(void) {
                             rating_y.constant = rating_show;
                             [self.view layoutIfNeeded];
                         }
                         completion:^(BOOL finished) {
                             
                             self.tableView.userInteractionEnabled = NO;
                             ratingView.userInteractionEnabled = YES;
                         }];
        
    }else{
        [self onRating:msg];
    }
    
}

-(BOOL)onCheckRatingPage{
    
    BOOL flag = false;
    
    if (self.dataSource.count > 1) {
        
        _mSelectedRatingQuestionMessage = [self.dataSource objectAtIndex:self.dataSource.count-2];
        
        _mSelectedRatingAnswerMessage = [self.dataSource objectAtIndex:self.dataSource.count-1];
        
        if (_mSelectedRatingAnswerMessage.fromMe == YES || _mSelectedRatingAnswerMessage.msg_active == 0) {
            flag = false;
        }else{
        
            if (_mSelectedRatingAnswerMessage.msg_id == theAppDelegate.gUserData.user_last_rating_qID) {
                
                flag = false;
            }else{
                flag = true;
            }
        }
        
    }
    
    
    return flag;
    
}

-(void)onRating:(Message*)msg{
    
    [self onRequestSend:msg];
    
    
    
    btnStar1.tag = 0;
    btnStar2.tag = 0;
    btnStar3.tag = 0;
    btnStar4.tag = 0;
    btnStar5.tag = 0;
    
    [self onUpdateStarUI];
}

-(void)onRequestSend:(Message*)msg{
    
    [SVProgressHUD showWithStatus:@"Sending..."];
    
    NSString *urlString = [NSString stringWithFormat:@"%@%@",WEBSERVICE_URL,[NSString stringWithFormat:WEB_QUESTION_POST]];
    
    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];
    
    NSDictionary *paramterDic = @{@"user_id":theAppDelegate.gUserData.user_id,
                                  @"question":msg.text,
                                  @"question_lat":[NSString stringWithFormat:@"%f",theAppDelegate.uLat],
                                  @"question_long":[NSString stringWithFormat:@"%f",theAppDelegate.uLong]};
    
    [manager POST:urlString parameters:paramterDic success:^(AFHTTPRequestOperation *operation, id responseObject) {
        
        [SVProgressHUD dismiss];
        
        if ( [responseObject count] > 0 ) {
            [self sendMessage:msg];
            
        }
        
    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {
        
        NSLog(@"%@",operation.responseString);
        [SVProgressHUD showErrorWithStatus:WEB_FAILED];
    }];
}

- (void)messageInputViewDidSelectMediaButton:(SOMessageInputView *)inputView
{
    // Take a photo/video or choose from gallery
}

-(IBAction)onCommunity:(id)sender{
    CommunityVC *mCommunityVC = [theAppDelegate.gMainStoryboard instantiateViewControllerWithIdentifier:@"CommunityVC"];
    [self.navigationController pushViewController:mCommunityVC animated:YES];
}
#pragma mark - logout
-(void)onLogout{
    
    UIAlertController *_alertView = [UIAlertController alertControllerWithTitle:nil message:@"You want to logout?" preferredStyle:UIAlertControllerStyleAlert];
    
    UIAlertAction* logout_cancel = [UIAlertAction
                         actionWithTitle:@"Cancel"
                         style:UIAlertActionStyleDefault
                         handler:^(UIAlertAction * action)
                         {
                             //Do some thing here
                             [_alertView dismissViewControllerAnimated:YES completion:nil];
                             
                         }];
    
    [_alertView addAction:logout_cancel];
    
    UIAlertAction* logout_yes = [UIAlertAction
                                    actionWithTitle:@"Yes"
                                    style:UIAlertActionStyleDefault
                                    handler:^(UIAlertAction * action)
                                    {
                                        //Do some thing here
                                        [STANDARD_DEFAULT_STRING setInteger:0 forKey:@"stock_login"];
                                        [STANDARD_DEFAULT_STRING synchronize];
                                        
                                        [theAppDelegate switchRootViewController:login_check_false];
                                        
                                    }];
    
    [_alertView addAction:logout_yes];
    
    
    [self presentViewController:_alertView animated:YES completion:nil];
    
}


#pragma mark - delegate to uialertview
-(void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex{
    if (buttonIndex == 1) {
        
        [STANDARD_DEFAULT_STRING setInteger:0 forKey:@"stock_login"];
        [STANDARD_DEFAULT_STRING synchronize];
        
        [theAppDelegate switchRootViewController:login_check_false];
        
    }
}

- (void)pushReceived:(NSNotification *)notification {

    [self performSelector:@selector(loadMessages) withObject:nil afterDelay:120];
//    [self loadMessages];
}
-(IBAction)onStar:(id)sender{
    
    UIButton *btn = (UIButton*)sender;
    
    if (btn == btnStar1) {
        
        btnStar1.tag = 1;
        btnStar2.tag = 0;
        btnStar3.tag = 0;
        btnStar4.tag = 0;
        btnStar5.tag = 0;
        
    }else if (btn == btnStar2){
        
        btnStar1.tag = 1;
        btnStar2.tag = 1;
        btnStar3.tag = 0;
        btnStar4.tag = 0;
        btnStar5.tag = 0;
        
    }else if (btn == btnStar3){
        
        btnStar1.tag = 1;
        btnStar2.tag = 1;
        btnStar3.tag = 1;
        btnStar4.tag = 0;
        btnStar5.tag = 0;
        
    }else if (btn == btnStar4){
        
        btnStar1.tag = 1;
        btnStar2.tag = 1;
        btnStar3.tag = 1;
        btnStar4.tag = 1;
        btnStar5.tag = 0;
        
    }else if (btn == btnStar5){
        
        btnStar1.tag = 1;
        btnStar2.tag = 1;
        btnStar3.tag = 1;
        btnStar4.tag = 1;
        btnStar5.tag = 1;
        
    }
    
    [self onUpdateStarUI];
}

-(void)onUpdateStarUI{
    
    if (btnStar1.tag == 0) {
        [btnStar1 setImage:[UIImage imageNamed:@"unstar"] forState:UIControlStateNormal];
    }else{
        [btnStar1 setImage:[UIImage imageNamed:@"star"] forState:UIControlStateNormal];
    }
    
    if (btnStar2.tag == 0) {
        [btnStar2 setImage:[UIImage imageNamed:@"unstar"] forState:UIControlStateNormal];
    }else{
        [btnStar2 setImage:[UIImage imageNamed:@"star"] forState:UIControlStateNormal];
    }
    
    if (btnStar3.tag == 0) {
        [btnStar3 setImage:[UIImage imageNamed:@"unstar"] forState:UIControlStateNormal];
    }else{
        [btnStar3 setImage:[UIImage imageNamed:@"star"] forState:UIControlStateNormal];
    }
    
    if (btnStar4.tag == 0) {
        [btnStar4 setImage:[UIImage imageNamed:@"unstar"] forState:UIControlStateNormal];
    }else{
        [btnStar4 setImage:[UIImage imageNamed:@"star"] forState:UIControlStateNormal];
    }
    
    if (btnStar5.tag == 0) {
        [btnStar5 setImage:[UIImage imageNamed:@"unstar"] forState:UIControlStateNormal];
    }else{
        [btnStar5 setImage:[UIImage imageNamed:@"star"] forState:UIControlStateNormal];
    }
    
}
-(int)getRating{
    
    int nRating = 0;
    
    if (btnStar1.tag == 1) {
        nRating++;
    }
    
    if (btnStar2.tag == 1) {
        nRating++;
    }
    
    if (btnStar3.tag == 1) {
        nRating++;
    }
    
    if (btnStar4.tag == 1) {
        nRating++;
    }
    
    if (btnStar5.tag == 1) {
        nRating++;
    }
    
    return nRating;
}
-(IBAction)onSubmit:(id)sender{
    
    int nRating = [self getRating];
    if (nRating == 0) {
        [SVProgressHUD showErrorWithStatus:@"You can give star 1~5"];
    }else{
        [SVProgressHUD showWithStatus:REQUEST_WAITING];
        
        NSString *urlString = [NSString stringWithFormat:@"%@%@",WEBSERVICE_URL,[NSString stringWithFormat:WEB_RATING_POST]];
        
        AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];
        
        if (theAppDelegate.uDeviceToken == nil) {
            theAppDelegate.uDeviceToken = @"d6cdb99035f272c8a7bb774a2cdc8319e73a4c54caacf50bb0c0b84161f3c48c";
        }
        
        NSDictionary *paramterDic = @{@"question_id":[NSNumber numberWithInt:_mSelectedRatingQuestionMessage.msg_id],
                                      @"answer_id":[NSNumber numberWithInt:_mSelectedRatingAnswerMessage.msg_id],
                                      @"user_id":_mSelectedRatingAnswerMessage.msg_user_id,
                                      @"rating":[NSNumber numberWithInt:[self getRating]]};
        
        [manager POST:urlString parameters:paramterDic success:^(AFHTTPRequestOperation *operation, id responseObject) {
            
            if ( [responseObject count] > 0 ) {
                
                NSDictionary *responseDic = [responseObject objectAtIndex:0];
                if ([[responseDic objectForKey:@"status"] intValue] == 200) {
                    
                    if ([responseDic objectForKey:@"answer_id"] != nil) {
                        theAppDelegate.gUserData.user_last_rating_qID = [[responseDic objectForKey:@"answer_id"] intValue];
                    }
                    
                    [[Utility getInstance]saveUserData:theAppDelegate.gUserData];
                    
                    [self onRating:_mMessageData];
                    
                    [UIView animateWithDuration:0.4
                                          delay:0
                                        options:(UIViewAnimationOptionAllowUserInteraction|
                                                 UIViewAnimationOptionBeginFromCurrentState)
                                     animations:^(void) {
                                         rating_y.constant = rating_hide;
                                         [self.view layoutIfNeeded];
                                     }
                                     completion:^(BOOL finished) {
                                         self.tableView.userInteractionEnabled = YES;
                                     }];
                    
                }else{
                    [SVProgressHUD showErrorWithStatus:WEB_FAILED];
                }
                
            }
            
        } failure:^(AFHTTPRequestOperation *operation, NSError *error) {
            
            NSLog(@"%@",operation.responseString);
            [SVProgressHUD showErrorWithStatus:WEB_FAILED];
            
            
        }];
    }
    
}

-(IBAction)onSetting:(id)sender{
    
    SettingVC *mSettingVC = [theAppDelegate.gMainStoryboard instantiateViewControllerWithIdentifier:@"SettingVC"];
    [self.navigationController pushViewController:mSettingVC animated:YES];
    
}

@end
